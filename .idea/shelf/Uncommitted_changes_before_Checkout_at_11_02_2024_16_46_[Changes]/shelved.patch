Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import folium\r\nfrom folium.plugins import MarkerCluster\r\n\r\nimport geopy\r\nfrom geopy import distance\r\nfrom geopy.geocoders import Nominatim\r\n\r\nimport re\r\nimport sys\r\nimport webbrowser\r\n\r\n\r\n# Initiate variables\r\nlocation = []\r\nnumbers = []\r\npoints = []\r\ndistance2point = {}\r\n\r\npat = '[-0-9]{1,2}.[0-9]+'     # pattern for searching coordinates\r\nsymbol1 = '.'\r\nsymbol2 = ','\r\n\r\ngeolocator = Nominatim(user_agent=\"points_on_map\")     # Geocoder’s initialization\r\n\r\n\r\n# Read the message and finding the elements according to the pattern\r\n# with open('message_EXAMPLE.txt', encoding=\"utf8\") as f:\r\nwith open('message.txt', encoding=\"utf8\") as f:\r\n\r\n    digits = re.findall(pat, f.read())\r\n\r\n# Bring found elements back to form \"(X)X.XXXXXXX\"\r\nfor item in digits:\r\n    if symbol1 in item:\r\n        numbers.append(float(item))\r\n    elif symbol2 in item:\r\n        numbers.append(float(item.replace(',', '.')))\r\n    elif item.isdigit():\r\n        numbers.append(float(item[:2] + symbol1 + item[2:]))\r\n\r\n# Make a list of coordinates\r\nfor i in range(0, len(numbers), 2):\r\n    points.append(list((numbers[i], numbers[i + 1])))\r\n\r\n\r\nwhile True:\r\n\r\n    try:\r\n        # Type our location\r\n        address = str(input('Enter your location: \\n'))\r\n        locations = geolocator.geocode(address, exactly_one=False)\r\n\r\n        # Select locations in Ukraine only\r\n        locations_UA = [loc_UA for loc_UA in locations if 'Україна' in loc_UA.address]\r\n\r\n        size = len(locations_UA)\r\n\r\n        # Use it if there is only one match\r\n        if size == 1:\r\n            location = locations_UA[0]\r\n            print(f'Your location is: \\n{location}')\r\n\r\n        # Offer to select if there is more than one match\r\n        elif size > 1:\r\n            for i in range(size):\r\n                print(i + 1, locations_UA[i])\r\n            print('Enter the number of your place:')\r\n            num = int(input())\r\n            location = locations_UA[num - 1]\r\n            print(f'Your location is: \\n{location}')\r\n        else:\r\n            print('!!! No matches. Try again!')\r\n\r\n        # Display the coordinates of our location (latitude, longitude)\r\n        print(location.latitude, location.longitude)\r\n        my_location = [location.latitude, location.longitude]\r\n\r\n        # Create a Folium Map object\r\n        my_map = folium.Map(\r\n            location=my_location,\r\n            zoom_start=9\r\n        )\r\n\r\n        # Initiate a red circle marker\r\n        folium.CircleMarker(\r\n            location=my_location,\r\n            radius=4,\r\n            color='red',\r\n            fill_color='Red',\r\n            fill_opacity=0.9\r\n        ).add_to(my_map)\r\n\r\n        # Initiate a cluster of markers\r\n        marker_cluster = MarkerCluster().add_to(my_map)\r\n\r\n        # Add points to map\r\n        for point in points:\r\n            folium.Marker(\r\n                location=point,\r\n            ).add_to(marker_cluster)\r\n\r\n            # Calculate the distance from my location to each point\r\n            distance2point[points.index(point) + 1] = round(distance.distance(my_location, tuple(point)).km, 1)\r\n\r\n        # Launch a webpage with the map\r\n        output_file = \"map.html\"\r\n        my_map.save(output_file)\r\n        webbrowser.open(output_file, new=2)  # open map in new tab\r\n\r\n        print('Number of locations in message:', len(points))\r\n        print('Min distance:', min(distance2point.values()))\r\n        sys.exit()\r\n\r\n    except TypeError:\r\n        print('!!! No matches. Try again!')\r\n    except geopy.exc.GeocoderUnavailable:\r\n        print('Bad connect. Restart...')\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	
+++ b/main.py	
@@ -16,7 +16,7 @@
 points = []
 distance2point = {}
 
-pat = '[-0-9]{1,2}.[0-9]+'     # pattern for searching coordinates
+pat = '[-0-9]{1,2}.[0-9]{3,15}'     # pattern for searching coordinates
 symbol1 = '.'
 symbol2 = ','
 
@@ -25,7 +25,7 @@
 
 # Read the message and finding the elements according to the pattern
 # with open('message_EXAMPLE.txt', encoding="utf8") as f:
-with open('message.txt', encoding="utf8") as f:
+with open('message1.txt', encoding="utf8") as f:
 
     digits = re.findall(pat, f.read())
 
